// PDF creation and download using jsPDF library
import { jsPDF } from 'jspdf';
import { DOMHelpers } from '../utils/dom-helpers.js';

export class PDFGenerator {
  constructor() {
    this.defaultOptions = {
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    };
  }

  async generatePDF(qrDataURL, shortURL, originalURL) {
    try {
      const pdf = new jsPDF(this.defaultOptions);
      
      // Set up document properties
      pdf.setProperties({
        title: 'QR Code Generator',
        subject: 'Generated QR Code and Shortened URL',
        author: 'QR Generator App',
        creator: 'QR Generator App'
      });

      // Add title
      pdf.setFontSize(20);
      pdf.setFont(undefined, 'bold');
      pdf.text('QR Code Generator', 20, 30);

      // Add QR code
      if (qrDataURL) {
        const qrSize = 60; // mm
        const qrX = (210 - qrSize) / 2; // Center on A4 width
        const qrY = 50;
        
        pdf.addImage(qrDataURL, 'PNG', qrX, qrY, qrSize, qrSize);
      }

      // Add shortened URL
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('Shortened URL:', 20, 130);
      
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      pdf.setTextColor(0, 0, 255); // Blue color for URL
      pdf.text(shortURL, 20, 140);

      // Add original URL
      pdf.setTextColor(0, 0, 0); // Reset to black
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('Original URL:', 20, 160);
      
      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      
      // Handle long URLs by splitting them
      const maxWidth = 170; // mm
      const urlLines = pdf.splitTextToSize(originalURL, maxWidth);
      pdf.text(urlLines, 20, 170);

      // Add footer
      const pageHeight = pdf.internal.pageSize.height;
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by QR Generator App', 20, pageHeight - 20);
      pdf.text(new Date().toLocaleDateString(), 20, pageHeight - 15);

      return {
        success: true,
        pdf: pdf,
        blob: pdf.output('blob'),
        dataURL: pdf.output('dataurlstring')
      };
    } catch (error) {
      console.error('PDF generation error:', error);
      return {
        success: false,
        error: error.message || 'Failed to generate PDF'
      };
    }
  }

  async downloadPDF(qrDataURL, shortURL, originalURL, filename = 'qr-code.pdf') {
    const result = await this.generatePDF(qrDataURL, shortURL, originalURL);
    
    if (!result.success) {
      return result;
    }

    try {
      // Download the PDF
      result.pdf.save(filename);
      
      return {
        success: true,
        filename: filename
      };
    } catch (error) {
      console.error('PDF download error:', error);
      return {
        success: false,
        error: error.message || 'Failed to download PDF'
      };
    }
  }

  async generateAndPreview(qrDataURL, shortURL, originalURL) {
    const result = await this.generatePDF(qrDataURL, shortURL, originalURL);
    
    if (!result.success) {
      return result;
    }

    try {
      // Open PDF in new tab for preview
      const pdfURL = URL.createObjectURL(result.blob);
      window.open(pdfURL, '_blank');
      
      // Clean up the URL after a delay
      setTimeout(() => {
        URL.revokeObjectURL(pdfURL);
      }, 1000);
      
      return {
        success: true,
        previewURL: pdfURL
      };
    } catch (error) {
      console.error('PDF preview error:', error);
      return {
        success: false,
        error: error.message || 'Failed to preview PDF'
      };
    }
  }
}
