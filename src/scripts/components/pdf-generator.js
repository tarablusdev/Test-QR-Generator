// PDF creation and download using jsPDF library
import { jsPDF } from 'jspdf';
import { DOMHelpers } from '../utils/dom-helpers.js';

export class PDFGenerator {
  constructor() {
    this.defaultOptions = {
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    };
  }

  async generatePDF(qrDataURL, title = 'QR Code', subtitle = '', details = []) {
    try {
      const pdf = new jsPDF(this.defaultOptions);
      
      // Set up document properties
      pdf.setProperties({
        title: title,
        subject: 'Generated QR Code',
        author: 'Qubex Tools',
        creator: 'Qubex Tools'
      });

      // Add title
      pdf.setFontSize(20);
      pdf.setFont(undefined, 'bold');
      pdf.text(title, 20, 30);

      // Add subtitle if provided
      if (subtitle) {
        pdf.setFontSize(14);
        pdf.setFont(undefined, 'normal');
        pdf.setTextColor(100, 100, 100);
        pdf.text(subtitle, 20, 40);
      }

      // Add QR code
      if (qrDataURL) {
        const qrSize = 60; // mm
        const qrX = (210 - qrSize) / 2; // Center on A4 width
        const qrY = subtitle ? 60 : 50;
        
        pdf.addImage(qrDataURL, 'PNG', qrX, qrY, qrSize, qrSize);
      }

      // Add details
      let yPosition = subtitle ? 140 : 130;
      pdf.setTextColor(0, 0, 0); // Reset to black
      
      if (details && details.length > 0) {
        details.forEach((detail, index) => {
          if (detail) {
            pdf.setFontSize(12);
            pdf.setFont(undefined, 'bold');
            
            // Split detail into label and value if it contains ':'
            const colonIndex = detail.indexOf(':');
            if (colonIndex > 0) {
              const label = detail.substring(0, colonIndex + 1);
              const value = detail.substring(colonIndex + 1).trim();
              
              pdf.text(label, 20, yPosition);
              
              pdf.setFont(undefined, 'normal');
              pdf.setFontSize(10);
              
              // Handle long values by splitting them
              const maxWidth = 170; // mm
              const valueLines = pdf.splitTextToSize(value, maxWidth);
              pdf.text(valueLines, 20, yPosition + 8);
              
              yPosition += 8 + (valueLines.length * 4) + 8;
            } else {
              pdf.setFontSize(10);
              pdf.setFont(undefined, 'normal');
              const detailLines = pdf.splitTextToSize(detail, 170);
              pdf.text(detailLines, 20, yPosition);
              yPosition += detailLines.length * 4 + 8;
            }
          }
        });
      }

      // Add footer
      const pageHeight = pdf.internal.pageSize.height;
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text('Generated by Qubex Tools', 20, pageHeight - 20);
      pdf.text(new Date().toLocaleDateString(), 20, pageHeight - 15);

      return {
        success: true,
        pdf: pdf,
        blob: pdf.output('blob'),
        dataURL: pdf.output('dataurlstring')
      };
    } catch (error) {
      console.error('PDF generation error:', error);
      return {
        success: false,
        error: error.message || 'Failed to generate PDF'
      };
    }
  }

  async downloadPDF(qrDataURL, title = 'QR Code', subtitle = '', details = [], filename = 'qr-code.pdf') {
    const result = await this.generatePDF(qrDataURL, title, subtitle, details);
    
    if (!result.success) {
      return result;
    }

    try {
      // Download the PDF
      result.pdf.save(filename);
      
      return {
        success: true,
        filename: filename
      };
    } catch (error) {
      console.error('PDF download error:', error);
      return {
        success: false,
        error: error.message || 'Failed to download PDF'
      };
    }
  }

  async generateAndPreview(qrDataURL, title = 'QR Code', subtitle = '', details = []) {
    const result = await this.generatePDF(qrDataURL, title, subtitle, details);
    
    if (!result.success) {
      return result;
    }

    try {
      // Open PDF in new tab for preview
      const pdfURL = URL.createObjectURL(result.blob);
      window.open(pdfURL, '_blank');
      
      // Clean up the URL after a delay
      setTimeout(() => {
        URL.revokeObjectURL(pdfURL);
      }, 1000);
      
      return {
        success: true,
        previewURL: pdfURL
      };
    } catch (error) {
      console.error('PDF preview error:', error);
      return {
        success: false,
        error: error.message || 'Failed to preview PDF'
      };
    }
  }

  async generateTextQRPDF(qrDataURL, textContent, filename = 'text-qr-code.pdf') {
    try {
      const pdf = new jsPDF(this.defaultOptions);
      
      // Set up document properties
      pdf.setProperties({
        title: 'Plain Text QR Code',
        subject: 'Generated Text QR Code',
        author: 'Qubex Tools',
        creator: 'Qubex Tools'
      });

      // Add title
      pdf.setFontSize(20);
      pdf.setFont(undefined, 'bold');
      pdf.text('Plain Text QR Code', 20, 30);

      // Add subtitle
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      pdf.setTextColor(100, 100, 100);
      pdf.text('Scan this QR code to view the text content', 20, 40);

      // Add QR code
      if (qrDataURL) {
        const qrSize = 60; // mm
        const qrX = (210 - qrSize) / 2; // Center on A4 width
        const qrY = 55;
        
        pdf.addImage(qrDataURL, 'PNG', qrX, qrY, qrSize, qrSize);
      }

      // Add text content section
      let yPosition = 130;
      pdf.setTextColor(0, 0, 0); // Reset to black
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('Text Content:', 20, yPosition);

      // Add the actual text content
      yPosition += 10;
      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      
      // Handle long text by splitting it
      const maxWidth = 170; // mm
      const textLines = pdf.splitTextToSize(textContent, maxWidth);
      
      // Check if text fits on one page
      const lineHeight = 4;
      const availableHeight = pdf.internal.pageSize.height - yPosition - 30; // Leave space for footer
      const requiredHeight = textLines.length * lineHeight;
      
      if (requiredHeight > availableHeight) {
        // Text is too long for one page, add page break logic
        let currentY = yPosition;
        let currentPage = 1;
        
        for (let i = 0; i < textLines.length; i++) {
          if (currentY > pdf.internal.pageSize.height - 30) {
            // Add new page
            pdf.addPage();
            currentPage++;
            currentY = 20;
            
            // Add page header
            pdf.setFontSize(12);
            pdf.setFont(undefined, 'bold');
            pdf.text(`Text Content (continued) - Page ${currentPage}`, 20, currentY);
            currentY += 10;
            pdf.setFontSize(10);
            pdf.setFont(undefined, 'normal');
          }
          
          pdf.text(textLines[i], 20, currentY);
          currentY += lineHeight;
        }
      } else {
        // Text fits on one page
        pdf.text(textLines, 20, yPosition);
      }

      // Add footer to all pages
      const totalPages = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        const pageHeight = pdf.internal.pageSize.height;
        pdf.setFontSize(8);
        pdf.setTextColor(128, 128, 128);
        pdf.text('Generated by Qubex Tools', 20, pageHeight - 20);
        pdf.text(new Date().toLocaleDateString(), 20, pageHeight - 15);
        
        if (totalPages > 1) {
          pdf.text(`Page ${i} of ${totalPages}`, 170, pageHeight - 15);
        }
      }

      // Download the PDF
      pdf.save(filename);
      
      return {
        success: true,
        filename: filename
      };
    } catch (error) {
      console.error('Text QR PDF generation error:', error);
      return {
        success: false,
        error: error.message || 'Failed to generate text QR PDF'
      };
    }
  }
}
